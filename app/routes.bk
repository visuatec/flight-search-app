# Import necessary modules
from flask import Blueprint, render_template, jsonify, request
from models import get_airports_autocomplete  # Import the function from your models
import logging
import requests
import os
import time
from dotenv import load_dotenv

# Initialize Blueprint
main = Blueprint("main", __name__)

# Configure logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
api_key = os.getenv("FLIGHT_API_KEY")


# Route for the home page
@main.route("/")
def index():
    return render_template("index.html")


# Route to fetch airport data for autocomplete
@main.route("/get-airports", methods=["GET"])
def get_airports():
    term = request.args.get("keyword", "")
    logger.info(f"Fetching airports for term: '{term}'")

    try:
        # Query the database for matching airports
        airports = get_airports_autocomplete(term)
        logger.info(f"Found airports: {len(airports)}")
        return jsonify(airports)
    except Exception as e:
        logger.error(f"Error fetching airports: {e}")
        return jsonify({"error": "Failed to fetch airports"}), 500


@main.route("/search-flights", methods=["GET"])
def search_flights():
    source_airport = request.args.get("source_airport")
    destination_airport = request.args.get("destination_airport")
    departure_date = request.args.get("departure_date")
    return_date = request.args.get("return_date")

    if not all([source_airport, destination_airport, departure_date]):
        logger.error("Error: Missing required parameters")
        return jsonify({"error": "Missing required parameters"}), 400

    logger.info(
        f"Searching flights from {source_airport} to {destination_airport} on {departure_date}"
    )

    try:
        flights = []
        page_token = None

        while True:
            url = f"https://api.flightapi.io/roundtrip/{api_key}/{source_airport}/{destination_airport}/{departure_date}/{return_date}/1/0/0/Economy/USD"
            params = {"page_token": page_token}
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()

            # Extracting relevant data
            itineraries = data.get("itineraries", [])
            legs = {leg["id"]: leg for leg in data.get("legs", [])}
            segments = {segment["id"]: segment for segment in data.get("segments", [])}
            places = {place["id"]: place for place in data.get("places", [])}
            carriers = {carrier["id"]: carrier for carrier in data.get("carriers", [])}
            agents = {agent["id"]: agent for agent in data.get("agents", [])}

            # Loop through each itinerary
            for itinerary in itineraries:
                # Define flight_info within the loop
                flight_info = {
                    "itineraries": itinerary.get("id", "N/A"),
                    "deepLink": itinerary.get("pricing_options", [{}])[0]
                    .get("items", [{}])[0]
                    .get("url", "N/A"),
                    "legs": [
                        legs[leg_id]
                        for leg_id in itinerary.get("leg_ids", [])
                        if leg_id in legs
                    ],
                    "segments": [
                        segments[segment_id]
                        for leg_id in itinerary.get("leg_ids", [])
                        for segment_id in legs.get(leg_id, {}).get("segment_ids", [])
                        if segment_id in segments
                    ],
                    "places": [
                        places[place_id]
                        for segment_id in flight_info["segments"]
                        for place_id in [
                            segments[segment_id]["origin_place_id"],
                            segments[segment_id]["destination_place_id"],
                        ]
                        if place_id in places
                    ],
                    "carriers": [
                        carriers.get(segment.get("marketing_carrier_id"), {}).get(
                            "name", "N/A"
                        )
                        for segment in flight_info["segments"]
                    ],
                    "agents": [
                        agents.get(agent_id, {}).get("name", "N/A")
                        for agent_id in itinerary.get("pricing_options", [{}])[0].get(
                            "agent_ids", []
                        )
                    ],
                }
                flights.append(flight_info)

            page_token = data.get("next_page_token")
            if not page_token:
                break

            time.sleep(1)  # Comply with API rate limits if needed

        if not flights:
            logger.info("No flights found for the given criteria")
            return jsonify({"message": "No flights found"}), 404

        logger.info("Flights data fetched successfully")
        return jsonify(flights)

    except requests.exceptions.RequestException as e:
        logger.error(f"API request error: {e}")
        return (
            jsonify({"error": "Failed to fetch flights from API", "details": str(e)}),
            500,
        )
    except ValueError as e:
        logger.error(f"JSON decoding error: {e}")
        return jsonify({"error": "Invalid response from API", "details": str(e)}), 500
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return (
            jsonify({"error": "An unexpected error occurred", "details": str(e)}),
            500,
        )
